/* Date: 2016-02-23
 */
#ifndef __SPHENGINE_H__
#define __SPHENGINE_H__

#include <cstdlib>
#include <iostream>
#include <memory>
#include <random>
#include <limits>
#include <vector>
#include <omp.h>

#include "Utility.h"
#include "Vector.h"
#include "Array.h"
#include "Bin.h"
#include "Particle.h"
#include "SPHForce.h"

#define TOL 0.00005
#define DIST_TOL 10e-7

namespace sim
{

struct EngineStats
{
   float max_velocity = -1.0f;
};

struct EngineFlags
{
   int use_leapfrog = 1;
   int use_sixth = 0;

};

class SPHEngine
{
   public:

      lux::Vector _urc, _llc;
      std::vector<Particle*> _particles;

      SPHEngine() {};

      SPHEngine(float dt, lux::Vector hi, lux::Vector lo, lux::Array<Bin>* array) :
         _urc(hi), _llc(lo), 
         _dt(dt), _force(new SPHForce()), 
         _bins(array)
      {
         global_id = 0;

         _thread_cnt = 1;

         global_gen = std::mt19937(global_rd());
         global_gen.seed(1);

         global_dis = std::uniform_real_distribution<>(0, 1);
         std::cout << "Entropy of random_device: " << global_rd.entropy() << "\n";
      }

      ~SPHEngine()
      {
			for(auto particle : _particles)
			{
				delete particle;
			}

         if( _bins )
			   delete _bins;
      }

      void initializeRandomDevice(const float min, const float max);
      void clearColors();

      void update();

      // Integration schemes
      void leapfrog(Particle& P, const float dt);
      void sixth(Particle& P, const float dt);

      void applyBoundaryConditions(Particle& P);
      void bounceParticle(Particle& P, lux::Vector& B, lux::Vector& N);

      void injectParticles(const size_t amount);
      void injectParticle(const float x_s, const float y_s);
      void updateBins();

      // Interaction
      void useLeapfrog();
      void useSixth();

      // Get and Set

      void setMaxThreads(const int tc) { _thread_cnt = tc; }

      SPHForce* getForce() const { return _force.get(); }
      lux::Array<Bin>* getBins() const { return _bins; }
      const EngineStats& getStats() const { return _stats; }

   private:
      // Variables
      uint64_t global_id;
      int _thread_cnt;

      float _dt;
      std::unique_ptr<SPHForce> _force;

      lux::Array<Bin>* _bins;

      std::random_device global_rd;
      std::mt19937 global_gen;
      std::uniform_real_distribution<> global_dis;

      EngineFlags _flags;
      EngineStats _stats;

      // Functions
      lux::Coord mapToBin(lux::Vector p);

};

}

#endif
